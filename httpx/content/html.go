package content

import (
	"html/template"
	"net/http"

	"github.com/rs/zerolog"
	"github.com/tkw1536/pkglib/httpx"
	"github.com/tkw1536/pkglib/minify"
)

// WriteHTML writes an html response to r into w.
//
// The response to be written is generated by rendering the template with the given context.
// The response is automatically minified.
//
// If err is not nil, an error response is rendered instead, see [httpx.HTMLInterceptor].
func WriteHTML[C any](context C, err error, template *template.Template, w http.ResponseWriter, r *http.Request) (e error) {
	return writeHTML(context, err, template, httpx.HTMLInterceptor, w, r)
}

// HTMLHandler is a [http.Handler] that responds to requests with html.
//
// C is the type of the context to be passed to the Template
type HTMLHandler[C any] struct {
	Handler func(r *http.Request) (C, error)

	// Template is the template to be rendered into responses
	Template     *template.Template
	TemplateName string // name of template to render, defaults to root
}

// ServeHTTP calls the handler, and then passes it and the template to WriteHTML.
func (h HTMLHandler[T]) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	// call the function
	result, err := h.Handler(r)

	// TODO: Remove this
	if h.TemplateName != "" {
		h.Template = h.Template.Lookup(h.TemplateName)
	}
	writeHTML(result, err, h.Template, httpx.HTMLInterceptor, w, r)
}

func writeHTML[C any](context C, err error, template *template.Template, interceptor httpx.ErrInterceptor, w http.ResponseWriter, r *http.Request) (e error) {
	// log any error that occurred
	defer func() {
		if e != nil {
			zerolog.Ctx(r.Context()).Err(e).Str("path", r.URL.String()).Msg("error rendering template")
		}
	}()

	// intercept any errors
	if interceptor.Intercept(w, r, err) {
		return nil
	}

	// write out the response as html
	w.Header().Set("Content-Type", httpx.ContentTypeHTML)
	w.WriteHeader(http.StatusOK)

	// minify html!
	minifier := minify.Minify(httpx.ContentTypeHTML, w)
	defer minifier.Close()

	// and return the template
	return template.Execute(minifier, context)
}
